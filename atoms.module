<?php

/**
 * Implements hook_theme_registry_alter() as described here: https://www.drupal.org/node/715160.
 */
function atoms_theme_registry_alter(&$theme_registry) {
  $theme_registry_copy = $theme_registry;
  $module_path = drupal_get_path('module', 'atoms');
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'atoms', $module_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  // A list of templates the module will provide templates for
  $hooks = array('entity');
  foreach ($hooks as $hook) {
    // Add the key 'theme paths' if it doesn't exist in this theme's registry
    if (!isset($theme_registry[$hook]['theme paths'])) {
      $theme_registry[$hook]['theme paths'] = array();
    }
    // Shift this module's directory to the top of the theme path list
    if (is_array($theme_registry[$hook]['theme paths'])) {
      $first_element = array_shift($theme_registry[$hook]['theme paths']);
      if ($first_element) {
        array_unshift($theme_registry[$hook]['theme paths'], $first_element, $module_path);
      }
      else {
        array_unshift($theme_registry[$hook]['theme paths'], $module_path);
      }
    }
  }
}

/**
 * Processes variables for theme_field().
 */
function atoms_process_field(&$vars) {
  $element = $vars['element'];
  if (in_array($element['#field_name'], array('field_content', 'field_header', 'field_featured'))) {

    // Simplify items:
    $items = $vars['items'];
    foreach ($items as $delta => $item) {
      $tmp_item = reset($item);
      $tmp_item = reset($tmp_item);
      $tmp_item['#atoms'] = array();
      $tmp_item['#host_field'] = $element['#field_name'];
      $items[$delta] = $tmp_item;
    }

    // Reverse items to process them without recursion:
    $items = array_reverse($items, TRUE);

    // Process items:
    foreach ($items as $delta => $item) {
      if (isset($element['#items'][$delta]['treeable_parent'])) {
        $parent = $element['#items'][$delta]['treeable_parent'];
        array_unshift($items[$parent]['#atoms'], $items[$delta]);
        unset($items[$delta]);
      }
    }

    // Reverse items back:
    $items = array_reverse($items, TRUE);

    $vars['items'] = $items;
  }
}

/**
 * Preprocesses variables for entity.tpl.php.
 */
function atoms_preprocess_entity(&$vars) {
  $element = $vars['elements'];
  if ($element['#entity_type'] == 'atom') {
    $vars['atoms'] = array();
    if (isset($element['#atoms'])) {
      $vars['atoms'] = $element['#atoms'];
    }
  }
}

/**
 * Processes variables for entity.tpl.php.
 */
function atoms_process_entity(&$vars) {
  $element = $vars['elements'];
  if ($element['#entity_type'] == 'atom') {
    $vars['prefix'] = '<div class="' . $vars['classes'] . '"' . $vars['attributes'] . '>' . drupal_render($vars['title_prefix']) . drupal_render($vars['title_suffix']);
    $vars['suffix'] = '</div>';
  }
}
