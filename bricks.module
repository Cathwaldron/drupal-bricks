<?php

use Drupal\Core\Render\Element;


/* BRICKS FORMATTING */

/**
 * Implements hook_theme_registry_alter().
 */
function bricks_theme_registry_alter(&$theme_registry) {
  if (\Drupal::moduleHandler()->moduleExists('eck')) {
    _bricks_theme_registry_alter_eck($theme_registry, 'bricks', 'brick');
    _bricks_theme_registry_alter_eck($theme_registry, 'bricks', 'brick', 'columns');
  }
}

/**
 * Helper function for hook_theme_registry_alter().
 *
 * Since we have to alter $theme_registry to ship templates in module - let's
 * give them better names: `brick.html.twig` over `eck-entity--brick.html.twig`.
 */
function _bricks_theme_registry_alter_eck(&$theme_registry, $module, $type, $bundle = NULL) {
  $key = 'eck_entity__' . $type;
  $template = $type;

  if (isset($bundle)) {
    $key .= '__' . $bundle;
    $template .= '--' . $bundle;
  }

  $theme_registry[$key] = array(
    'theme path' => drupal_get_path('module', $module),
    'template' => $template,
    'path' => drupal_get_path('module', $module) . '/templates',
  ) + $theme_registry['eck_entity'];
}

/**
 * Prepares variables for `eck-entity.html.twig`.
 */
function bricks_preprocess_eck_entity(&$variables) {
  if (!empty($variables['entity']['field_childs']) && Element::children($variables['entity']['field_childs'])) {
    $variables['entity']['childs'] = array_intersect_key($variables['entity']['field_childs'], Element::children($variables['entity']['field_childs']));
  }
}

/**
 * Prepares variables for `field.html.twig`.
 */
function bricks_preprocess_field(&$variables) {
  $element = $variables['element'];

  if ($element['#formatter'] == 'bricks_nested') {
    $variables['items'] = _bricks_nest_items($element, $variables['items']);
  }
}

/**
 * Helper function: converts element's items to a tree structure.
 */
function _bricks_nest_items($element, $items) {

  // Prepare items:
  $parents = array(-1);
  $prev_depth = 0;
  foreach ($items as $delta => $item) {
    $depth = $element['#items'][$delta]->depth;
    if ($depth > $prev_depth) {
      array_unshift($parents, $delta - 1);
    }
    else if ($depth < $prev_depth) {
      array_splice($parents, 0, $prev_depth - $depth);
    }
    $prev_depth = $depth;

    $items[$delta]['#delta'] = $delta;
    $items[$delta]['#parent_delta'] = $parents[0];

    // ['content']['childs'] is good since it's compatible with default field template:
    $items[$delta]['content']['childs'] = array();
    if (!empty($element['#items'][$delta]->options['view_mode'])) {
      $items[$delta]['content']['#view_mode'] = $element['#items'][$delta]->options['view_mode'];
    }
    if (!empty($element['#items'][$delta]->options['css_class'])) {
      $items[$delta]['content']['#attributes']['class'][] = $element['#items'][$delta]->options['css_class'];
    }
    unset($items[$delta]['attributes']);
  }

  // Process items in reverse order (without recursion):
  $rdeltas = array_reverse(array_keys($items));
  foreach ($rdeltas as $delta) {
      // Generate a unique key per each brick for a proper cache context:
      $items[$delta]['content']['#cache']['keys'][] = "{$element['#object']->getEntityTypeId()}:{$element['#object']->id()}:{$element['#field_name']}:{$delta}";
      // @TODO: Specify cache tags.

    $parent_delta = $items[$delta]['#parent_delta'];
    if ($parent_delta != -1) {
      array_unshift($items[$parent_delta]['content']['childs'], $items[$delta]);
      unset($items[$delta]);
    }
  }

  return $items;
}


/* BRICKS EDITING */

/**
 * Prepares variables for `field-multiple-value-form.html.twig`.
 */
function bricks_preprocess_field_multiple_value_form(&$variables) {
  _bricks_preprocess_tabledrag_form($variables, 'element', 'bricks_tree_autocomplete', $variables['element']['#field_name'] . '-delta-order');
}

/**
 * Helper function for hook_preprocess_field_multiple_value_form().
 */
function _bricks_preprocess_tabledrag_form(&$variables, $element_key, $widget, $order_class, $render_options = FALSE) {
  $element = $variables[$element_key];

  if (isset($element['#widget']) && $element['#widget'] == $widget) {
      $variables['table']['#header'][] = ['data' => t('Depth'), 'class' => ['bricks-depth-header']];

    foreach (Element::children($element) as $key) {
      if ($key !== 'add_more') {
        $depth = $element[$key]['depth']['#value'];

        $indentation = array();
        if ($depth > 0) {
          $indentation = array(
            '#theme' => 'indentation',
            '#size' => $depth,
          );
        }

        $drag_cell = &$variables['table']['#rows'][$key]['data'][0];
        $drag_cell['data'] = !empty($indentation) ? drupal_render($indentation) : '' . $drag_cell['data'];
        $drag_cell['style'] = 'width: initial'; // @TODO

        show($element[$key]['depth']);
          $variables['table']['#rows'][$key]['data'][] = \Drupal::service('renderer')->render($element[$key]['depth']);

        if ($render_options) { // @TODO: Get rid of $render_options hack.
          $variables['table']['#rows'][$key]['data'][3]['data']['#suffix'] = \Drupal::service('renderer')->render($element[$key]['options']);
        }
      }
    }

    $tabledrag_options = &$variables['table']['#tabledrag'];
    $tabledrag_options[0]['relationship'] = 'all';
    $tabledrag_options[] = array(
      'action' => 'depth',
      'relationship' => 'group',
      'group' => 'bricks-depth',
    );
    // Fake option to enable indentation:
    $tabledrag_options[] = array(
      'action' => 'match',
      'relationship' => 'parent',
      'group' => $order_class,
    );

    $variables['table']['#attached']['library'][] = 'bricks/tabledrag.relationship-all';
  }
}

/**
 * Helper function for widget's formElement().
 */
function _bricks_form_element_alter(&$element, $item) {
  $element['depth'] = array(
    '#type' => 'hidden', // @TODO: Other types break the correct indentations.
    '#default_value' => !empty($item->depth) ? $item->depth : 0,
    '#weight' => 10,
    '#attributes' => array(
      'class' => array('bricks-depth'),
    ),
  );
  $element['options'] = array(
    '#type' => 'container',
    '#weight' => 100,
  );
  $element['options']['view_mode'] = array(
    '#type' => 'textfield',
    '#default_value' => !empty($item->options['view_mode']) ? $item->options['view_mode'] : '',
    '#size' => 10,
    '#attributes' => array(
      'placeholder' => t('View mode'),
    ),
  );
  $element['options']['css_class'] = array(
    '#type' => 'textfield',
    '#default_value' => !empty($item->options['css_class']) ? $item->options['css_class'] : '',
    '#size' => 10,
    '#attributes' => array(
      'placeholder' => t('CSS class(-es)'),
    ),
  );
}
